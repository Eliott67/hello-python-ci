name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests
      - name: Run tests
        run: pytest

      # Step 5: Deploy locally
      - name: Deploy app (localhost simulation)
        run: |
          echo "Starting app..."
          nohup python app.py &
          sleep 2
          echo "App started on localhost"

      # step 6: start SSH agent
      - name: start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # step 7: copy file to VM
      - name: Copy files to VM
        run: |
          scp -o StrictHostKeyChecking=no app.py requirements.txt ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USER }}/app/

      # step 8: Install Python & dependencies on VM
      - name: Install Python & dependencies on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-pip
            cd ~/app
            pip3 install -r requirements.txt
          EOF

      # step 9: deploy app remotely
      - name: Deploy app remotely
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/app
            # Kill previous process if running
            pkill -f "python3 app.py" || true
            # Run app in background and redirect logs
            nohup python3 app.py > app.log 2>&1 &
            sleep 2
            tail -n 20 app.log
          EOF

       
